services:
  chirpstack:
    image: chirpstack/chirpstack:4
    command: -c /etc/chirpstack
    restart: unless-stopped
    volumes:
      #- ./configuration/chirpstack:/etc/chirpstack 
      - /home/chirpstack-docker/configuration/chirpstack:/etc/chirpstack
    depends_on:
      - postgres
      - mosquitto
      - redis
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - REDIS_HOST=redis
      - POSTGRESQL_HOST=postgres
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.chirpstack.entrypoints=http
      - traefik.http.routers.chirpstack.rule=Host(`chirpstack.twinrockets.io`) && PathPrefix(`/`)
      - traefik.http.routers.chirpstack.service=chirpstack
      - traefik.http.services.chirpstack.loadbalancer.server.port=8080
    #ports:
     # - "8181:8080"

  chirpstack-gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:4
    restart: unless-stopped
    ports:
      - "1700:1700/udp"
    volumes:
      #- ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
      - /home/chirpstack-docker/configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    environment:
      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/event/{{ .EventType }}
      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/state/{{ .StateType }}
      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/command/#
    depends_on:
      - mosquitto
  
  chirpstack-gateway-bridge-basicstation:
    image: chirpstack/chirpstack-gateway-bridge:4
    restart: unless-stopped
    command: -c /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge-basicstation-eu868.toml
    #ports:
    #  - "3001:3001"
    volumes:
      #- ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
      - /home/chirpstack-docker/configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    depends_on:
      - mosquitto

  chirpstack-rest-api:
    image: chirpstack/chirpstack-rest-api:4
    restart: unless-stopped
    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure
    #ports:
    #  - "8090:8090"
    depends_on:
      - chirpstack
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.chirpstack-api.entrypoints=http
      - traefik.http.routers.chirpstack-api.rule=Host(`chirpstack-api.twinrockets.io`) && PathPrefix(`/`)
      - traefik.http.routers.chirpstack-api.service=chirpstack-api
      - traefik.http.services.chirpstack-api.loadbalancer.server.port=8090

  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
     # - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
      - /home/chirpstack-docker/configuration/postgresql/initdb:/docker-entrypoint-initdb.d
      - postgresqldata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=chirpstack
      - POSTGRES_PASSWORD=chirpstack
      - POSTGRES_DB=chirpstack

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --save 300 1 --save 60 100 --appendonly no
    volumes:
      - redisdata:/data

  mosquitto:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    #ports:
    #  - "1883:1883"
    volumes: 
     # - ./configuration/mosquitto/config/:/mosquitto/config/
      - /home/chirpstack-docker/configuration/mosquitto/config/:/mosquitto/config/
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.mqtt.loadbalancer.server.port=1883"
      - "traefik.tcp.services.mqtt_websocket.loadbalancer.server.port=9001"
      - "traefik.tcp.routers.tcpr_mqtt.entrypoints=mqtt"
      - "traefik.tcp.routers.tcpr_mqtt.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.tcpr_mqtt.service=mqtt"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.entrypoints=websocket"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.service=mqtt_websocket"

volumes:
  postgresqldata:
  redisdata:
